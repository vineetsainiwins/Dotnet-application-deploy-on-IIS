trigger:
      - none

pool:
  name: test agent

variables:
  BuildConfiguration: 'Debug'
# Stage 1: Build, Test, and Generate Coverage 
stages:
- stage: Build_Test_Coverage
  displayName: Build, Test, and Generate Coverage
  jobs:
  - job: BuildAndTest
    steps:
    - task: SonarQubePrepare@7
      inputs:
        SonarQube: 'sonarqube-integrate'
        scannerMode: 'dotnet'
        projectKey: 'codecoverage.net'
        projectName: 'deploy'
        # extraProperties: |
        #   sonar.sources=$(Build.SourcesDirectory)/src
        #   sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/coverage.opencover.xml 
        #   sonar.verbose=true
    # Step 1: Restore Dependencies
    - script: dotnet restore
      displayName: 'Restore Dependencies'
    # Step 2: Run Unit Tests with Coverage
    - script: |
        dotnet test CRUD.csproj \
          --no-restore \
          --collect:"XPlat Code Coverage" \
          --logger:"trx;LogFileName=TestResults.trx" \
          --results-directory ./TestResults
      displayName: 'Run Tests with Coverage'
    # Step4: Run Tests with Code Coverage
    - script: |
        dotnet test --collect:"Code Coverage" --results-directory TestResults
      displayName: 'Run Tests with Code Coverage'
      continueOnError: true  # Proceed even if tests fail
    # Step5: Convert Coverage File to opencover Format
    - script: |
        dotnet tool install -g coverlet.console || true
        export PATH="$PATH:~/.dotnet/tools"
        coverlet bin/$(BuildConfiguration)/net8.0/CRUD.dll \
          --target "dotnet" \
          --targetargs "test --no-build" \
          --include "[CRUD]*" \
          --include-test-assembly \
          --format opencover \
          --output ./TestResults/coverage.opencover.xml || true
      displayName: 'Convert Coverage to Cobertura, opencover Format'
    # Step: Generate Coverage Report
    # - script: |
    #     # export PATH="$PATH:~/.dotnet/tools"
    #     reportgenerator \
    #       -reports:"TestResults/coverage.opencover.xml" \
    #       -targetdir:"coveragereport" \
    #       -reporttypes:"HtmlInline_AzurePipelines;opencover"
    #   displayName: 'Generate Code Coverage Report' 
    # Step 8: Perform SonarCloud Analysis
    - task: SonarQubeAnalyze@7
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'

    - task: SonarQubePublish@7
      inputs:
        pollingTimeoutSec: '300'
    # Step 10: Publish Code Coverage Report as a Build Artifact
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'TestResults'
        ArtifactName: 'CodeCoverageReport'
        publishLocation: 'Container'
      displayName: 'Publish Coverage Report'
# Stage 2: Build and Run the Application using Docker   
- stage: Docker_Build_Run
  dependsOn: Build_Test_Coverage
  condition: succeeded()
  jobs:
  - job: DockerComposeBuild
    steps:
    - script: |
        docker-compose down
        docker-compose up -d --build
      displayName: 'Build and Run App using Docker Compose'

